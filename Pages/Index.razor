@page "/"

<PageTitle>CSS Animation Demo</PageTitle>

@using BlazorAnimateDemo.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

@{
    var forecastAnimation = "not-loaded";
}
@if(forecast != null)
{
    if(forecast.TemperatureF > 60)
    {
        forecastAnimation = "weather-animation-hot";
    }
    else
    {
        forecastAnimation = "weather-animation-cold";
    }
}


<div class="flex justify-center weather-component">
  <div class="block p-6 rounded-lg shadow-lg max-w-sm @forecastAnimation">
    <h5 class="text-gray-900 text-xl leading-tight font-medium mb-2">Today's Weather</h5>
    <p class="text-gray-700 text-base mb-4">
            @if(forecast != null)
            {
                <span>@forecast.TemperatureF</span>
            }
        </p>
    <button type="button" class="inline-block px-6 py-2.5 bg-blue-600 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out" @onclick="GetWeather">Load Weather</button>
    <button type="button" class="inline-block px-6 py-2.5 bg-red-600 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-red-700 hover:shadow-lg focus:bg-red-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-red-800 active:shadow-lg transition duration-150 ease-in-out" @onclick="ClearWeather">Clear Weather</button>
  </div>
</div>


@code {
    private WeatherForecast forecast;

    private async Task GetWeather()
    {
        forecast = await ForecastService.GetForecastAsync(DateTime.Now);
    }
    private async Task ClearWeather()
    {
        forecast = null;
    }
}
